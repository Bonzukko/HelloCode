                            // ВИДЫ МЕТОДОВ

            // Вид 1 - методы, которые ничего не принимают и ничего не возвращают

// метод ниже может показывать какие-либо данные, например: указывать ваше авторство в каком-либо документе.

// void Method1()  // метод
// {                                                   //
//     Console.WriteLine("Author...");                 // Тело метода
// }                                                   //
// Method1();

//______________________________________________________________________________________________________

            // Вид 2 - методы, которые ничего не возвращают, но могут принимать какие-то аргументы

// void Method2(string msg)
// {
//     Console.WriteLine(msg);
// }
// // Method2("Какой-то текст");
// Method2(msg: "Какой-то текст"); // конкретный аргумент ( в данном случае аргумент msg(message)) добавляется в том случае, если метод имеет несколько аргументов и нам нужно показать в данном месте какой-то конкретный аргумент

// void Method21(string msg, int count) // допустим - мне надо вывести текст какого-то сообщения (msg) какое-то количество раз (count)
// {
//     int i = 0;  // запускаем счётчик от 0
//     while (i < count) // пока условие, что счётчик i меньше кол-ва count
//     {
//         Console.WriteLine(msg); // консоль выводит нижепрописанное сообщение
//         i++; // счётчик будет прибавлять +1 до тех пор, пока на выполнится условие i < count, данные count пропишем ниже
//     }
// }    
// // Method21("Всё получится", 4); // здесь сперва идёт аргумент msg, затем count
// // НО, если аргументы именованы, как я напишу дальше, то не обязательно их прописывать по порядку. смотри
// Method21(count: 4, msg:"Всё точно получится");

//______________________________________________________________________________________________________


            // Вид 3 - Это методы, которые что-то возвращают, но ничего не принимают

  // Если метод что-то возвращает, мы в обязательном порядке должны указать тип данных, значение которого ожидаем. Для нас это будет Method3          
// int Method3()// в скобках ничего - метод не принимает никакие аргументы4
// {
//     return DateTime.Now.Year; //- обязательное использование оператора return,
// }
// int year = Method3(); //- вызываем метод, в левой части используем идентификатор переменной (year) и через оператор присваивания (=) кладём нужное значение
// Console.WriteLine(year);
// //В дальнейшем используем переменную year, и то значение, которое нам вернул метод. То есть return DateTime.Now.Year провёл какую-то работу и в переменную year будет положен результат работы метода, дальше мы можем его использовать. 

//______________________________________________________________________________________________________

            // Вид 4 -  это методы, которые что-то принимают и что-то возвращают

// string Method4(int count, string text) // - что мы здесь делаем? Мы будем string компоновать друг за другом count раз.
// {
// int i = 0; // инициализируем счётчик
// string result = String.Empty; // задаём переменную result, и первоначально она будет Пустой Строкой
// while (i < count)
// {
// result = result + text;
// i++; // счётчик каждый раз увеличивается на 1, пока не достигнет значения равного count - тогда цикл завершится
// }
// return result; // - return - оператор возврата, в котором указываем ту переменную, значение которой планируем получить из метода.
// }
// string res = Method4(10, " учись!"); // для того, чтобы вызвать Метод4 нам необходимо создать переменную рез и по порядку вписать значение аргументов - 10 раз вызвать " учись!"
// Console.WriteLine(res);

//______________________________________________________________________________________________________


            // ЦИКЛ СО СЧЁТЧИКОМ for
// синтаксически он просто собирает в себе всё в кучу
// на примере из 4 задачки, которая выше

// string Method4(int count, string text) 
// {
//  // запускаем цикл
// string result = String.Empty; 
// for (int i = 0; i < count; i++)
// {
// result = result + text;
// }
// return result;
// }
// string res = Method4(3, " учись, и всё получится!");
// Console.WriteLine(res);

//______________________________________________________________________________________________________


                        // ЦИКЛ В ЦИКЛЕ
// как пример - написание таблицы умножения

// for (int i = 2; i <= 10; i++)
// {
//     for (int j = 2; j < 10; j++)
//     {
//        Console.WriteLine($"{i}*{j}={i*j}");
//     }
//     Console.WriteLine();
// }
//______________________________________________________________________________________________________

                            // Тренировочная задача

//=====Работа с текстом
// Дан текст. В тексте нужно все пробелы заменить чёрточками,
// маленькие буквы “к” заменить большими “К”,
// а большие “С” маленькими “с”.
// Ясна ли задача?

                              // пояснение:
// string s = “qwerty”
//             012345
//В частности, если требуется обратиться к конкретному символу строки, мы можем это делать, начиная отсчитывать позицию символов с 0. То есть «q» — это 0, «w» — 1, «e» — 2 и так далее. Чтобы получить конкретный символ, мы можем через квадратные скобки обратиться, указать идентификатор строки. Например:
// s[3] // r

// string text = "— Я думаю, — сказал князь, улыбаясь, — что,"
//             + "ежели бы вас послали вместо нашего милого Винценгероде,"
//             + "вы бы взяли приступом согласие прусского короля."
//             + "Вы так красноречивы. Вы дадите мне чаю?";

// string Replace(string text, char oldValue, char newValue)
// {
//     string result = String.Empty;
//     int length = text.Length;
//     for(int i = 0; i < length; i++)
//     {
//         if(text[i] == oldValue) result = result + $"{newValue}";
//         else result = result + $"{text[i]}";
//     }
//     return result;
// }
// string NewText = Replace(text, ' ', '|');
// Console.WriteLine(NewText);
// Console.WriteLine();
// NewText = Replace(text, 'к', 'К');
// Console.WriteLine(NewText);
// NewText = Replace(text, 'с', 'С');
// Console.WriteLine(NewText);

//____________________________________________________________________________________

                                    // МЕТОД МИНМАКСа

// Стоит задача упорядочить массив

int[] array = {1,5,4,3,2,7,6,1,1};  // задаём массив
void PrintArray (int[] array)       // вводим метод для отображения этого массива на консоли
{
    int count = array.Length;       // задаём переменную count равную длине массива
    for (int i = 0; i < count; i++) // запускаем цикл. он будет работать до тех пор, пока переменная i(каждый раз по новому витку цикла будет увеличиваться на 1) будет меньше переменной  count.
    {
        Console.Write($"{array[i]} "); // выводим на консоли текущее значение данного индекса
    }
    Console.WriteLine(); //после того, как вывод окончен - мы выводим этой комадой просто пустую строчку
}

void SelectionSort(int[] array)  //  вводим метод для упорядочивания массива
{
    for(int i = 0; i < array.Length - 1; i++) // запускаем цикл. он будет работать до тех пор, пока переменная i(каждый раз по новому витку цикла будет увеличиваться на 1) будет меньше длины массива минус одна позиция.
    {
        int minPosition = i;  // вводим искомую минимальную позицию (сперва она будет равна значению индекс 0)
        for(int j = i + 1; j < array.Length; j ++)           //
        {                                                   // Этот блок кода будет искатьминимальный элемент
        if(array[j] < array[minPosition]) minPosition = j;  //
        }
        int Temporary = array [i];
        array [i] = array [minPosition]; // сюда мы вводим найденную мин.позицию
        array [minPosition] = Temporary; // далее в эту позицию вкладываем элемент, который был временным
    }
}
PrintArray(array);
SelectionSort(array);
PrintArray(array);