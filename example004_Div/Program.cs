double numberA = 34; // контейнер dooble позволяет работать с вещественными числами ( числами с запятой)
// например int можно использовать при делении 10/5 , но не при делении 12/5 - результатом будет всё равно 2. а double выведет 2,4 (две целых четыре десятых), как и должно быть.
double numberB = 5;
double result = numberA / numberB;
Console.WriteLine(result);
// Console - это команда, позволяющая нам работать с окном терминала ниже
// Оператор WriteLine - для вывода в окно терминала (в данном случае текста в круглых скобках и ковычках - Hello, world)
// каждый раз для проверки работоспособности кода введите в терминале: dotnet run
// не забывайте после изменений производить сохранение через Ctrl+S

// Console.Write - выводит в строку
// Console.WriteLine каждый раз с новой строки
// ReadLine(); - Считать строку из терминала

//  int - контейнер для целого числа, numberA - название переменной
//  dooble контейнер  позволяет работать с вещественными числами ( числами с запятой)
//  например: int можно использовать при делении 10/5 , но не при делении 12/5 - результатом будет всё равно 2. а double выведет 2,4 (две целых четыре десятых), как и должно быть.
//  string может содержать в себе от 0 (пустая строка - Empty string) до много символов
//  bool (логический тип данных, хранящий в себе только правду - true или ложь - false ) 
    
    // классические арифметические операции в языке С# производят с помощью команд: 
// +    сложение
// -    вычитание
// *    умножение
// /    деление
// %    нахождение остатка от деления
// ()   в скобках будут расположены приоритетные операции, например: (6-4)/2 = 1, а 6-4/2 = 4
//  new Random().Next(min,max) - генератор псевдослучайных чисел (даст случайное число от min до max-1) - смотри в примере example003
//  команда .ToLower() - переводит все символы строки в нижний регистр, и Машу будет приветствовать вне зависимости от регистра написания любой из букв в этом имени, хоть маША - смотри в примере example005

//  example008 - Введение в методы (функции или подпрограммы)
// декомпозиция - деление большой задачи на более мелкие подзадачи(подпрограммы)
// * функция имеет идентификатор (имя)
// * может иметь входные аргументы
// * может возвращать значения

//  example009, example010 - Введение в массивы (array)
// ТИП ДАННЫХ[]ИМЯ = {Значение1, Значение2,...}
// int[] array = {9,28,1,32,1990}
// int[] array = new int [5];                        несколько примеров написания массива
// int[] array = new int [5]{1,0,2,0,3};

// array[0] = 12 ; - обращение к конкретному элементу массива ( вданном примере с индексом 0) и присвоение ему значения = 12.

//  example012 - виды методов, цикл for, алгоритм сортировки выбором максимального( или минимального)

//  example013 - рекурсия